# settings file for BOUT++ UEDGE benchmark test

##################################################
# settings used by the core code

NOUT = 20       # number of time-steps
TIMESTEP = 0.1e-5   # time between outputs in unit tbar

wall_limit=169.50 # wall time limit (in hours)
ShiftXderivs = true # use shifted radial derivatives?
TwistShift = true  # use twist-shift condition?
ballooning = true

ShiftOrder = 0
TwistOrder = 0

non_uniform = true   # grid points distance, dx

MZ = 1            # number of points in z direction (2^n + 1)
ZPERIOD = 1        # Fraction of a torus to simulate

#ZMIN = 0.0
#ZMAX = 5.5460e-02

MXG = 2
MYG = 2

#grid="data/uedge.grd_Up_Ni_Tei_2d.nc"
#grid="data/slab.grd.nc"
#grid="data/circle.grd.hl2a16246_500ms.nc"
#grid="data/circle.grd.nc"
#grid="data/circle.grd.hl2a22535_700_0.75a.nc"
#grid="data/circle.grd.hl2a22535_831ms_0.65to1.nc"
#grid="data/circle.grd.hl2a22535_831ms_68x256_0.65to1a.nc"
#grid="data/cbm18_dens8.grid_nx68ny64.nc"
#grid="data/circle.grd.hl2a.nc"
#grid="data/circular.grd.hl2a22535.831ms.68x256.0.65to1.1.nc"
grid="data/cbm18_dens8.grid_nx68ny64.nc"
#grid = "data/d3d_119919.nc"

##!NB: NXPE must be divided by (NX-4), while 4 is the guard cells
NXPE = 1   # X parallelised if > 1, NXPE*NYPE=mppwidth  

dump_format = "nc"  # NetCDF format

[laplace]
laplace_nonuniform = true  # grid points distance, dx 
nonuniform = true          # grid points distance, dx

[restart]
init_missing=true

[mesh]
symmetricGlobalX = true

shiftangle_from_zshift=true


[comms]
async = false


##################################################
## derivative methods
#
[ddx]
first = C2  #C4  # order of first x derivatives (options are 2 or 4)
second = C2   #   C4 # order of second x derivatives (2 or 4)
upwind = W3 # order of upwinding method (1, 4, or 0 = TVD)

[ddy]

first = C2 #C4
second = C2 #C4
upwind = W3

[ddz]

first = C2   #C4
second = C2  #C4
upwind = W3

##################################################
## Solver settings
[solver]
# mudq, mldq, mukeep, mlkeep preconditioner options
mxstep = 500000 # Maximum number of internal steps
ATOL = 1.0e-8 # absolute tolerance
RTOL = 1.0e-5  # relative tolerance

##################################################
## Electrostatic potential solver

[phiSolver]

inner_boundary_flags = 0   # DC zero gradient
outer_boundary_flags = 0  # INVERT_SET  (2.8 * Te)

all_terms = true
nonuniform=true

###[laplacexz]
###type = cyclic
###inner_boundary_flags = 1 # INVERT_IN_CYLINDER  (cylinder axis)
###outer_boundary_flags = 16

[laplacexy]  # 2D solver in X-Y
pctype = sor    # Preconditioner

atol = 1e-12
rtol = 1e-8

core_bndry_dirichlet = false
pf_bndry_dirichlet = true
y_bndry_dirichlet = false

include_y_derivs = true

[aparSolver]
inner_boundary_flags = 0
outer_boundary_flags = 0

all_terms = true
nonuniform= true

##################################################
# settings for trans_neu model

[trans_neu]

### Evolving equations control
NOT_SOLVE_FOR_Vi =  false

minimum_val=1.e-10              # minimum value to protect Ni Nn Nm from being zero
noshear = true                  # zero all shear
include_curvature = flase       # include curvature drive term?
Turb_Diff_on = false            # if true, turbulent diffusion on, but recently not available  
##phi_constraint = false # Solve phi as a constraint (DAE system, needs IDA)
##diamag = true   #ZYLHJ
# BRACKET_METHOD flags:
# # 0:BRACKET_STD; derivative methods will be determined 
# #   by the choices C or W in this input file
# # 1:BRACKET_SIMPLE; 2:BRACKET_ARAKAWA; 3:BRACKET_CTU.
#
## bracket_method_exb = 0   #differencing schemes for ExB
## bracket_method_mag = 2   #differencing schemes for magnetic flutter

## field inversion flags: Add the following
##  1 - Zero-gradient DC component on inner boundary
##  2 - Zero-gradient AC component on inner boundary
##  4 -      "        DC     "      " outer    "
##  8 -      "        AC     "      " outer    "
## 16 - Zero all DC components of the result
## 32 - Don't use previous solution to start iterations
##      (iterative methods only) 
## 64 - Set the width of the boundary layer to 1
## 128 - use 4th order differencing
## 256 - Laplacian = 0 inner boundary (combine 2nd & 4th-order)
## 512 - Laplacian = 0 outer boundary ( sometimes works )
#
##phi_flags = 74  # inversion flags for phi (2+8+64+128)
##phi_flags = 769  # 256 + 512
#
##apar_flags = 74 # 2+8
##apar_flags = 769



###***Parameters of basic physiscs  ***##

NZ = 1                         # maximum grid number in Z; 2D NZ=1; 3D NZ=MZ-1

AA = 2.0                        # AA=Mi/Mp, ion mass in unit of proton mass 
ZZ = 1.0                        # charge state

q95_input = 5.                  # q at normalized psi=0.95, for thermal conductivity limitation
Lnn_min = 1.e-3                 # unit m, density length at largest density gradient, for Diffc_nn_perp limitation   
Te_x=10.0                       # eV, normalized Temprature parameter  
Ti_x=10.0                       # eV
Tm_x=0.02580                    # eV multiply 1.1604e^4 transfer to unit K, injected molecule temperature   
Ni_x=1.0                        # 1.e19 m^-3, normalized Density parameter
density_unit = 1.e19            #  m^-3, calculate quantities in real SI units 

#bmag=2.35                      # Tesla,normalized Magnetic field parameter, loaded automatically from g-file 
#Lbar=1.0                       # m, normalized Length parameter, loaded automatically from g-file
Lp_crit =5.e-6                  # m, for turbulent diffusion triggering, but recently not available

Mi=1.0                          # in unit Mass of ion, Mi=2.*mp=2.*1.6726e^-27 kg
Mn=1.0                          # in unit Mass of ion, Mi=2.*mp=2.*1.6726e^-27 kg
Mm=2.0                          # in Mi
W_ionz=20.                      # in unit eV, energy lose per ionization 
W_diss=4.5                      # in unit eV , Te lossing per molecule dissociation
W_bind=0.5                      # in unit eV, bind energy during molecule dissociation
W_rec=4.5                       # in eV, electron gaining energy per recombination, max=13.6eV

laplace_alpha = 1.0    #test the effect of first order term of invert

### diffusion parameters in unit m^2/s, (default value),

Diffc_ni_perp=1.              # perp=perpendicular,  Diff= Diffusion  
Difft_ni_perp=1.0               # t=turbulent, c=classical
          
chic_i_perp=1.                  # i=ion, 
chit_i_perp=4.0                 #  
        
chic_e_perp=1.                  # e=electron    
chit_e_perp=6.0

chic_n_perp =0.4                # neutral atom, not in function due to Tn=Ti assumption recently

## Vacuum region control
vacuum_pressure = 0.02 # the pressure below which it is considered vacuum 
#fraction of peak pressure
vacuum_trans = 0.01   # transition width (fraction of P)
## Resistivity and Hyper-resistivity
vac_lund = 1.0e8    # Lundquist number in vacuum  (negative -> infinity)
core_lund = 1.0e8  # Lundquist number in core (negative -> infinity)

### step function of diffusion coefficients, priority lower than diffusion_coef_Hmode
diffusion_coef_step_function = false 
diffusion_coef_step0 = 0.1      # when normalized psi <= 1.0,
diffusion_coef_step1 = 1.0      # when normalized psi >  1.0,

### diffusion coefficients for initial_profile_Hmode
diffusion_coef_Hmode = false       # 
diffusion_PF_constant = false      # necessary to set the value in private flux region to diffusion_coef_Hmode0
aveYg11J_core = 0.00638025          # necessary to re-calculated for averageY(g11*J) at core
diffusion_coef_Hmode0 = 1.      # value at xin
diffusion_coef_Hmode1 = 100.     # maximum value limited especially when normalized psi >  1.0,

###***Controls for Sheath boundary condition  ***##
## NB: if there is a blowup/non-finite of Vi at y=0 which is due to Sheath Boundary, it has to
##     run with 'Sheath_BC = false' for a while and then continue run with 'Sheath_BC = true'  
##     or turn on initial_PF_edgeval option

Sheath_BC = true                # Apply Sheath Boundary condition
Sheath_width = 0                # Sheath width, ny grid numbers, for Sheath BC test only 
#Sheath_BC_x0=0.906 # sheat boundary condition start from x0 (i.e., cbm x0=54./64.,hl2a x0=58/64)
Sheath_BC_x0=0.

###***Controls for particle recyclings at the plates and wall ***##

SBC_particle_recycle = true     # if true, particle recycling at Sheath BC (or divertor plates)
Wall_particle_recycle = true    # if true, particle recycling at wall
Lni_wall = 0.05                  # unit m, Gradient length Ni at wall
alpha_vn = 0.
angle_B_plate = 3.1415926/6.    # unit rad, angle between magnetic field and divertor plate
Rate_recycle = 1.              # value in range [0,1], Gamma_nn=R_cycl*Gamma_ni

###***Controls of different terms ***##

term_GparkappaTe_GparTe = true  # it causes error of 'tstep too small' when 3D SMBI   

terms_recombination = true 
terms_Gradpar_pn = true
terms_Gradpar_eta0n = true
terms_Diffcnn_par = true
terms_NnGradpar_Vn = false      # Be true only when ddt(Vn)=0
terms_Gradperp_diffcoefs = true


####****reversed parallel magnetic field****#####
reversed_mag_field = false

####****phi3d solver***###
##phi3d = false
#

boussinesq = true   # Use Boussinesq approximation

####Electrostatic potential
newXZsolver = false
split_n0 = true  # Solve n=0 separately?
#


###*** external sources  ***###
external_sources = false          # priority lower than extsrcs_balance_diffusion
extsrcs_balance_diffusion = false  # external sources equal to diffusion terms 

x0_extS = 0.9                    # a.u. location of pedestal relative to normalized psi 
width_extS = 0.062                # a.u. width of pedestal
coef_coregrad_extS = 0.0021        # a.u. coefficient of core gradient, or pedestal top gradient 
amp_spi_ext = 2.e1                # N0/s
amp_see_ext = 2.e4                # eV*N0/s
amp_sei_ext = 2.e4                ###***Controls of nl_filter to smooth data ***##

nlfilter_noisy_data = false      # if true, nl_filter(var) smooth data
nlfilter_Gradpar_logNn = false
nlfilter_Vnpol = false
filter_para = 0.2                # value=[0,1], smooth order

###***Controls of initial profiles  ***##
# Initial file parameters
# if initial_profile_exp=true, i.e, Te=Te_edge+Te_core/(1+exp(2.*(GlobalX-Initfile_x0)/Initfile_w_ped))
# if initial_profile_linear=true, i.e,  Te=Te_edge - dTedx_xin_au*(psi_xout_y0-psi)

profiles_lasttimestep = false     # priority I, avalable once cont run 'restart append' fail or re-run since t=t0, but call 'lasttimestep.pro' to generate 'lstime_Ni.txt' etc first 
load_grid_profiles = false       # priority II,if true, load initial profiles of Te Ti Ni from grid file, but a problem in the code needs to be corrected
load_experiment_profiles = false  # priority III,if true, experiment  Te Ti Ni from grid file
initial_profile_exp = false      # priority III,if true, initial profiles of Te Ti Ni are in form of Te=Te_edge+Te_core/(1+exp(2.*(GlobalX-Initfile_x0)/Initfile_w_ped))  
initial_profile_linear = true    # priority III,if true, initial profiles of Te Ti Ni are in form of Te=Te_edge - dTedx_xin_au*(psi_xout_y0-psi)
initial_profile_Hmode = false     # priority III, if true, initial profiles of TeNiTi, same shape, Hmode_function((psi_hat-x0_ped)/width_ped,coef_coregrad_ped,Te_core,Te_edge) 

initial_PF_edgeval = false        # set values of TiNiTe at PF region with their values at edge/xout

# paramters public for all kinds of profiles
Te_core = 1000.                  # eV, NB: enlarged in Hmode
Te_edge = 0.1e-5                    # eV, 
Ti_core = 1000.                  # eV
Ti_edge = 0.1e-5                    # eV
Ni_core = 0.065                     # 1.e19 m^-3
Ni_edge = 0.1e-5                  # 1.e19 m^-3, 

dNidx_xin_au = -195.             # a.u. NB: same as bndry of Ni at xin
dTidx_xin_au = -25100.           # a.u. NB: same as bndry of Ti at xin
dTedx_xin_au = -25100.           # a.u. NB: same as bndry of Te at xin

# parameters of initial_profile_exp
Initfile_x0 = 0.4                # a.u. x= jx/NX
Initfile_w_ped = 0.2             # a.u.

# parameters of initial_profile_linear

#psi_xout_y0 = 0.24340           # m^2 T, psi at xout or nxmax-2 and y=0 (cbm64) for initial_profile_linear

#psi_xout_y0 = 0.5           # (hl2a w/ X point), different for different g-file 
#psi_xout_y0 = 0.01
psi_xout_y0 = -0.158877

# parameters of initial_profile_Hmode
x0_ped = 0.90                    # a.u. location of pedestal relative to normalized psi 
width_ped = 0.062                # a.u. width of pedestal
coef_coregrad_ped = 0.01         # a.u. coefficient of core gradient 
coef_corenlarge_ped = 18.          # a.u. coefficient of core enlarge

###* Controls of fueling, set SMBI locations, constant flux BC 

SMBI_LFS = false                  # SMBI at low field side

Nm0=1.                         # 1.e19 m^-3
Vm0=-800.                       # in unit m/s

CF_BC_x0=1.03                    # parameters of constant flux boundary condition
#CF_BC_y0=0.48                   # circle geometry w/o X point 
#CF_BC_y1=0.52
CF_BC_y0=0.575                    # hl2a circle geometry w/ X point, different for different g-file 
CF_BC_y1=0.625                    # hl2a circle geometry w/ X point
CF_BC_z0=0.                    # smbi range z_left
CF_BC_z1=2.                    # smbi range z_right
### Spitzer resistivity 
spitzer_resist =false

### Controls of bootstrap current calculation for elm-pb cases
BScurrent = true                # if true, calculate bootstrap current
Aratio = 0.35

##################################################
# settings for individual variables
# The section "All" defines default settings for all variables
# These can be overridden for individual variables in
# a section of that name.

[All]
scale = 0.0 # default size of initial perturbations
#bndry_all = neumann_o2
#bndry_xin = shifted(neumann_o2)
#bndry_xout = shifted(neumann_o2)

# initial profile shape
# ---------------------
# 0 - constant
# 1 - Gaussian
# 2 - Sinusoidal
# 3 - Mix of mode numbers (like original BOUT)

#xs_opt = 1
#ys_opt = 2
#zs_opt = 3

#xs_s0 = 0.5
#xs_wd = 0.5

#ys_mode = 1

#zs_mode = 1 # toroidal mode number

# boundary conditions
# -------------------
# dirichlet      = zero value
# dirichlet(val) = Fix at val

# neumann        = zero gradient 
# neumann (val)  = Fix gradient (NB:boundary_stardard.cxx should be modified)
# NB one bug: neumann(val) for a positive val, gradient at _xin is positive but at _xout is negative!!! Be careful!
# zerolaplace    = Laplacian = 0, decaying solution
# constlaplace   = Laplacian = 0, decaying solution
#
# Regions: core, pf, sol, target
#          xin, xout, ydown, yup, all
#
# All boundaries can be made relaxing e.g.
#    "relax(dirichlet(1.))" will relax towards 1
# To specify a relaxation rate (1/timescale), pass an argument to relax:
#    "relax(dirichlet(1.), 10)" sets the rate to 10. (the default).
#
# NOTE: The boundary quantities are normalised to
#       the values set in the grid file:
# Te_x = 10 eV
# Ni_x = 1.e19 m^-3
# Vi_x = 21850 m/s  NB: Depends on bmag, Te_x, AA and ZZ


#bndry_all = neumann # Default for all variables, boundaries
#bndry_all = dirichlet ## circle

[U]

#function = 0
#bndry_xin = neumann
#bndry_xout  = neumann
bndry_xin = zerolaplace
bndry_xout = zerolaplace

[Ni]

#bndry_xin  = neumann(-195.)           # NB: same as dNidx_xin_au

#function = 0
#source = 0.0

#bndry_xin = zerolaplace
#bndry_xout = zerolaplace
bndry_xin  = neumann
bndry_xout =neumann                    # NB:  necessary to turn on when recycling
#bndry_xout  = relax(dirichlet(0.007))   # val=Ni_edge/Ni_x   NB: turn off if recycling
#bndry_pf  = relax(dirichlet(0.007))     # val=Ni_edge/Ni_x

[Vi]

bndry_xin = neumann
bndry_xout  = neumann  
#bndry_xin = zerolaplace
#bndry_xout = zerolaplace

[psi]
bndry_xin = zerolaplace
bndry_xout = zerolaplace

#bndry_core = zerolaplace #shifted(dirichlet_o2) #constlaplace
#bndry_pf   = shifted(dirichlet_o2)
#bndry_xout = shifted(dirichlet_o2)

#bndry_xin = neumann
#bndry_xout = neumann
#bndry_pf  = relax(dirichlet(1.e-10))
[J]

#bndry_xin = neumann
#bndry_xout  = neumann
#bndry_pf  = relax(dirichlet(1.e-10))

[phi]

#bndry_xin = none
#bndry_xout = none
#bndry_all = dirichlet_o2
bndry_xin = zerolaplace
bndry_xout = zerolaplace
#bndry_xin = neumann
#bndry_xout  = neumann
#bndry_all = dirichlet_o2
#bndry_pf  = relax(dirichlet(1.e-10))
[V]

#bndry_xin = neumann
#bndry_xout  = neumann

##bndry_xin = none
##bndry_xout  = none

##bndry_all = dirichlet_o2

[pei]

bndry_xin = zerolaplace
bndry_xout = zerolaplace
#bndry_xin = neumann
#bndry_xout  = neumann

[Ti]


##bndry_xin = neumann(-25100.)           # NB: same as dTidx_xin_au

#bndry_xin = zerolaplace
#bndry_xout = zerolaplace
bndry_xin = neumann
bndry_xout  = neumann  
##bndry_xout  = relax(dirichlet(0.5))   # val=Ti_edge/Ti_x
##bndry_pf  = relax(dirichlet(0.5))     # val=Ti_edge/Ti_x

[Te]

#bndry_xin = neumann(-25100.)          # NB: same as dTedx_xin_au
#bndry_xin = zerolaplace
#bndry_xout = zerolaplace
bndry_xin = neumann
bndry_xout = neumann
#bndry_xout  = relax(dirichlet(0.5))   # val=Te_edge/Te_x
#bndry_pf  = relax(dirichlet(0.5))     # val=Te_edge/Te_x

[Nn]
bndry_xin =neumann
bndry_xout =neumann                # NB: not necessary to turn off when recycling
#bndry_pf = relax(dirichlet(1.e-10))

[Tn]
bndry_xin =neumann

bndry_xout =neumann
#bndry_xin = zerolaplace
#bndry_xout = zerolaplace
[Vn]

bndry_xin = neumann
bndry_xout = neumann

[Nm]
bndry_xin = neumann
bndry_xout =neumann

[Vm]

bndry_xin = neumann
bndry_xout = neumann

